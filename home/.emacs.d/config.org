* Theme

The color is extremely important. No ?

#+BEGIN_SRC emacs-lisp
;; Setting a theme would be like this
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'dracula t)
#+END_SRC

And Powerline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
    (powerline-default-theme)    
)
#+END_SRC

* Navigation
** Temp Files

I don't like that it does the #file# every time I modify something.

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
#+END_SRC

** Neotree

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
    ;; Setting dark background officially, otherwise NeoTree does black on black
    (setq frame-background-mode 'dark)
    (global-set-key [f8] 'neotree-toggle)
    (setq neo-smart-open t)
  )
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :config
    (autoload 'markdown-mode "markdown-mode"
      "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
  )
#+END_SRC

** Yasnippet

Nice !

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (yas-global-mode 1)
  )
#+END_SRC

* Edit Help
* Programming
** Compile and recompile

#+BEGIN_SRC emacs-lisp
(global-set-key [f5] 'recompile)
#+END_SRC

** Gtags

From its wiki, but not using it for the moment...

#+BEGIN_SRC emacs-lisp
;;(use-package ggtags
;;  :ensure t
;;  :config 
;;     (add-hook 'c-mode-common-hook
;;       (lambda ()
;;       (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;       (ggtags-mode 1))))
;;)
#+END_SRC

** Rtags

Rtags jumps around !

#+BEGIN_SRC emacs-lisp
(use-package rtags
 :ensure t
 :config
  (define-key c-mode-base-map (kbd "M-.") ;; go to definition
     (function rtags-find-symbol-at-point))
  (define-key c-mode-base-map (kbd "M-,") ;; list references
     (function rtags-find-references-at-point))
  (define-key c-mode-base-map (kbd "M--") ;; back
     (function rtags-location-stack-back))
  (define-key c-mode-base-map (kbd "M-+") ;; forth
     (function rtags-location-stack-forward))
  (rtags-enable-standard-keybindings)  ;; starting with "C-c r", listed down 
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
  (setq rtags-completions-enabled t)
)

(use-package company
 :ensure t
 :config
   (push 'company-rtags company-backends)
   (global-company-mode)
   (define-key c-mode-base-map (kbd "<M-tab>") (function company-complete))
)

(use-package flycheck-rtags
 :ensure t
 :config
  (defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
  ;; c-mode-common-hook is also called by c++-mode
  (add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
)

#+END_SRC

All these keybingding work with the prefix "C-c r"

("." . rtags-find-symbol-at-point)
("," . rtags-find-references-at-point)
("v" . rtags-find-virtuals-at-point)
("V" . rtags-print-enum-value-at-point)
("/" . rtags-find-all-references-at-point)
("Y" . rtags-cycle-overlays-on-screen)
(">" . rtags-find-symbol)
("<" . rtags-find-references)
("-" . rtags-location-stack-back)
("+" . rtags-location-stack-forward)
("D" . rtags-diagnostics)
("G" . rtags-guess-function-at-point)
("p" . rtags-set-current-project)
("P" . rtags-print-dependencies)
("e" . rtags-reparse-file)
("E" . rtags-preprocess-file)
("R" . rtags-rename-symbol)
("M" . rtags-symbol-info)
("S" . rtags-display-summary)
("O" . rtags-goto-offset)
(";" . rtags-find-file)
("F" . rtags-fixit)
("X" . rtags-fix-fixit-at-point)
("B" . rtags-show-rtags-buffer)
("I" . rtags-imenu)
("T" . rtags-taglist)))

** Golang 
#+BEGIN_SRC emacs-lisp
 (use-package go-mode
   :ensure t)
#+END_SRC
** Checks

#+BEGIN_SRC emacs-lisp
;; (use-package flycheck
;;   :ensure t
;;   :init (global-flycheck-mode))
#+END_SRC

** Clang Format

#+BEGIN_SRC emacs-lisp
(use-package clang-format
  :ensure t
  :config
    (global-set-key (kbd "C-c u") 'clang-format-buffer)
)
#+END_SRC

** Doxygen

Position on a symbol and then type "M-x doxy<TAB>" to see the options 

#+BEGIN_SRC emacs-lisp
(use-package doxygen
  :ensure t )
#+END_SRC

** Cmake

Just show syntax, at leas I use it like that :D

#+BEGIN_SRC emacs-lisp
 (use-package cmake-mode
   :ensure t) 
#+END_SRC
** AutoComplete

#+BEGIN_SRC emacs-lisp
;; (use-package auto-complete
;;   :ensure t
;;   :config (ac-config-default))
#+END_SRC

* Life
** RSS Feed

#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :ensure t
  :config
  (global-set-key (kbd "C-x w") 'elfeed)
  (setq-default elfeed-search-filter "-flood +unread ")
)

#+END_SRC

And of course the org mode

#+BEGIN_SRC emacs-lisp
;; use an org file to organise feeds
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+END_SRC

* Org
** Agenda config
Agenda needs activation as [[http://orgmode.org/manual/Activation.html#Activation][here in the manual]]

#+BEGIN_SRC emacs-lisp
;; Not default, but "suggested" and "standard" keybindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)

;; Following links with a double click
(setq org-return-follows-link t)

;; Open email addresses on external editor
(setq browse-url-mailto-function nil)

;; Agenda selections
(setq org-agenda-custom-commands
      '(
        ("d" "Admin"
         ((tags-todo "@admin&urgente-SCHEDULED={.+}")
          (tags-todo "@admin&facile-SCHEDULED={.+}")
          (tags-todo "@admin&delicato-SCHEDULED={.+}")
          (tags-todo "@admin-urgente-facile-delicato-SCHEDULED={.+}")
        ))
        ("p" "Progetto"
         ((tags-todo "@progetto&urgente-SCHEDULED={.+}")
          (tags-todo "@progetto&facile-SCHEDULED={.+}")
          (tags-todo "@progetto&delicato-SCHEDULED={.+}")
          (tags-todo "@progetto-urgente-facile-delicato-SCHEDULED={.+}")
        ))
        ("l" "Lavoro"
         ((tags-todo "@lavoro&urgente-SCHEDULED={.+}")          
          (tags-todo "@lavoro&facile-SCHEDULED={.+}")           
          (tags-todo "@lavoro&delicato-SCHEDULED={.+}")         
          (tags-todo "@lavoro-urgente-facile-delicato-SCHEDULED={.+}")
        ))            
        ("s" "Svago"
         ((tags-todo "@svago&film")             
          (tags-todo "@svago&ascoltare")           
          (tags-todo "@svago&suonare")          
          (tags-todo "@svago&letture")        
          (tags-todo "@svago-film-ascoltare-suonare-suonare")
        ))            
        ("a" "My agenda"
         ((org-agenda-list)
          (tags-todo "urgente-SCHEDULED={.+}") 
        ))           
        ;; ... put your other custom commands here
       ))

;; Setting effor possible types once and for all
(setq org-global-properties
              '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))
(setq org-todo-keywords
              '((sequence "TODO" "STARTED" "WAITING" "APPT" "|" "DONE" "CANCELLED")))
(setq org-tag-alist '((:startgroup . nil)
              ("@lavoro" . ?l)
              ("@admin" . ?a)
              ("@svago" . ?s)
              ("@progetto" . ?p)
              (:endgroup . nil)
              ("facile" . ?f) ("delicato" . ?d) ("urgente" . ?u) ))
#+END_SRC

** Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
)
#+END_SRC

** Common Files Shortcut

#+BEGIN_SRC emacs-lisp
;; Config with F5
(global-set-key (kbd "<f5>") (lambda() (interactive)(find-file "~/.emacs.d/config.org")))
#+END_SRC
